//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Code.Gameplay.Features.Interactions.Select;
using Code.Gameplay.Features.Interactions.Select.Animators;

public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherSelectingAnimator;

    public static Entitas.IMatcher<GameEntity> SelectingAnimator {
        get {
            if (_matcherSelectingAnimator == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.SelectingAnimator);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherSelectingAnimator = matcher;
            }

            return _matcherSelectingAnimator;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public SelectingAnimator selectingAnimator { get { return (SelectingAnimator)GetComponent(GameComponentsLookup.SelectingAnimator); } }
    public ISelectingAnimator SelectingAnimator { get { return selectingAnimator.Value; } }
    public bool hasSelectingAnimator { get { return HasComponent(GameComponentsLookup.SelectingAnimator); } }

    public GameEntity AddSelectingAnimator(ISelectingAnimator newValue) {
        var index = GameComponentsLookup.SelectingAnimator;
        var component = (SelectingAnimator)CreateComponent(index, typeof(SelectingAnimator));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceSelectingAnimator(ISelectingAnimator newValue) {
        var index = GameComponentsLookup.SelectingAnimator;
        var component = (SelectingAnimator)CreateComponent(index, typeof(SelectingAnimator));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveSelectingAnimator() {
        RemoveComponent(GameComponentsLookup.SelectingAnimator);
        return this;
    }
}
