//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Code.Gameplay.Features.FastInteract;

public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherPickedForInteraction;

    public static Entitas.IMatcher<GameEntity> PickedForInteraction {
        get {
            if (_matcherPickedForInteraction == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.PickedForInteraction);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherPickedForInteraction = matcher;
            }

            return _matcherPickedForInteraction;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public PickedForInteraction pickedForInteraction { get { return (PickedForInteraction)GetComponent(GameComponentsLookup.PickedForInteraction); } }
    public System.Collections.Generic.List<int> PickedForInteraction { get { return pickedForInteraction.Value; } }
    public bool hasPickedForInteraction { get { return HasComponent(GameComponentsLookup.PickedForInteraction); } }

    public GameEntity AddPickedForInteraction(System.Collections.Generic.List<int> newValue) {
        var index = GameComponentsLookup.PickedForInteraction;
        var component = (PickedForInteraction)CreateComponent(index, typeof(PickedForInteraction));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplacePickedForInteraction(System.Collections.Generic.List<int> newValue) {
        var index = GameComponentsLookup.PickedForInteraction;
        var component = (PickedForInteraction)CreateComponent(index, typeof(PickedForInteraction));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemovePickedForInteraction() {
        RemoveComponent(GameComponentsLookup.PickedForInteraction);
        return this;
    }
}
