//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherSoundId;

    public static Entitas.IMatcher<GameEntity> SoundId {
        get {
            if (_matcherSoundId == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.SoundId);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherSoundId = matcher;
            }

            return _matcherSoundId;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Gameplay.Features.Sounds.SoundIdComponent soundId { get { return (Code.Gameplay.Features.Sounds.SoundIdComponent)GetComponent(GameComponentsLookup.SoundId); } }
    public Code.Gameplay.Features.Sounds.Data.SoundId SoundId { get { return soundId.Value; } }
    public bool hasSoundId { get { return HasComponent(GameComponentsLookup.SoundId); } }

    public GameEntity AddSoundId(Code.Gameplay.Features.Sounds.Data.SoundId newValue) {
        var index = GameComponentsLookup.SoundId;
        var component = (Code.Gameplay.Features.Sounds.SoundIdComponent)CreateComponent(index, typeof(Code.Gameplay.Features.Sounds.SoundIdComponent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceSoundId(Code.Gameplay.Features.Sounds.Data.SoundId newValue) {
        var index = GameComponentsLookup.SoundId;
        var component = (Code.Gameplay.Features.Sounds.SoundIdComponent)CreateComponent(index, typeof(Code.Gameplay.Features.Sounds.SoundIdComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveSoundId() {
        RemoveComponent(GameComponentsLookup.SoundId);
        return this;
    }
}
