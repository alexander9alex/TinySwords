//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherAttackTarget;

    public static Entitas.IMatcher<GameEntity> AttackTarget {
        get {
            if (_matcherAttackTarget == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.AttackTarget);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherAttackTarget = matcher;
            }

            return _matcherAttackTarget;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Gameplay.Features.Battle.AttackTarget attackTarget { get { return (Code.Gameplay.Features.Battle.AttackTarget)GetComponent(GameComponentsLookup.AttackTarget); } }
    public int AttackTarget { get { return attackTarget.Value; } }
    public bool hasAttackTarget { get { return HasComponent(GameComponentsLookup.AttackTarget); } }

    public GameEntity AddAttackTarget(int newValue) {
        var index = GameComponentsLookup.AttackTarget;
        var component = (Code.Gameplay.Features.Battle.AttackTarget)CreateComponent(index, typeof(Code.Gameplay.Features.Battle.AttackTarget));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceAttackTarget(int newValue) {
        var index = GameComponentsLookup.AttackTarget;
        var component = (Code.Gameplay.Features.Battle.AttackTarget)CreateComponent(index, typeof(Code.Gameplay.Features.Battle.AttackTarget));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveAttackTarget() {
        RemoveComponent(GameComponentsLookup.AttackTarget);
        return this;
    }
}
