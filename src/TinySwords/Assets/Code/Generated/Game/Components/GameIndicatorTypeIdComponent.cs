//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherIndicatorTypeId;

    public static Entitas.IMatcher<GameEntity> IndicatorTypeId {
        get {
            if (_matcherIndicatorTypeId == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.IndicatorTypeId);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherIndicatorTypeId = matcher;
            }

            return _matcherIndicatorTypeId;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Gameplay.Features.Indicators.IndicatorTypeIdComponent indicatorTypeId { get { return (Code.Gameplay.Features.Indicators.IndicatorTypeIdComponent)GetComponent(GameComponentsLookup.IndicatorTypeId); } }
    public Code.Gameplay.Features.Indicators.Data.IndicatorTypeId IndicatorTypeId { get { return indicatorTypeId.Value; } }
    public bool hasIndicatorTypeId { get { return HasComponent(GameComponentsLookup.IndicatorTypeId); } }

    public GameEntity AddIndicatorTypeId(Code.Gameplay.Features.Indicators.Data.IndicatorTypeId newValue) {
        var index = GameComponentsLookup.IndicatorTypeId;
        var component = (Code.Gameplay.Features.Indicators.IndicatorTypeIdComponent)CreateComponent(index, typeof(Code.Gameplay.Features.Indicators.IndicatorTypeIdComponent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceIndicatorTypeId(Code.Gameplay.Features.Indicators.Data.IndicatorTypeId newValue) {
        var index = GameComponentsLookup.IndicatorTypeId;
        var component = (Code.Gameplay.Features.Indicators.IndicatorTypeIdComponent)CreateComponent(index, typeof(Code.Gameplay.Features.Indicators.IndicatorTypeIdComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveIndicatorTypeId() {
        RemoveComponent(GameComponentsLookup.IndicatorTypeId);
        return this;
    }
}
