//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherLegsPosition;

    public static Entitas.IMatcher<GameEntity> LegsPosition {
        get {
            if (_matcherLegsPosition == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.LegsPosition);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherLegsPosition = matcher;
            }

            return _matcherLegsPosition;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Gameplay.Features.Units.LegsPosition legsPosition { get { return (Code.Gameplay.Features.Units.LegsPosition)GetComponent(GameComponentsLookup.LegsPosition); } }
    public UnityEngine.Vector2 LegsPosition { get { return legsPosition.Value; } }
    public bool hasLegsPosition { get { return HasComponent(GameComponentsLookup.LegsPosition); } }

    public GameEntity AddLegsPosition(UnityEngine.Vector2 newValue) {
        var index = GameComponentsLookup.LegsPosition;
        var component = (Code.Gameplay.Features.Units.LegsPosition)CreateComponent(index, typeof(Code.Gameplay.Features.Units.LegsPosition));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceLegsPosition(UnityEngine.Vector2 newValue) {
        var index = GameComponentsLookup.LegsPosition;
        var component = (Code.Gameplay.Features.Units.LegsPosition)CreateComponent(index, typeof(Code.Gameplay.Features.Units.LegsPosition));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveLegsPosition() {
        RemoveComponent(GameComponentsLookup.LegsPosition);
        return this;
    }
}
