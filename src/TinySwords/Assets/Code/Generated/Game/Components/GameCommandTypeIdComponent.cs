//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherCommandTypeId;

    public static Entitas.IMatcher<GameEntity> CommandTypeId {
        get {
            if (_matcherCommandTypeId == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.CommandTypeId);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherCommandTypeId = matcher;
            }

            return _matcherCommandTypeId;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Gameplay.Features.Command.CommandTypeIdComponent commandTypeId { get { return (Code.Gameplay.Features.Command.CommandTypeIdComponent)GetComponent(GameComponentsLookup.CommandTypeId); } }
    public Code.Gameplay.Features.Command.Data.CommandTypeId CommandTypeId { get { return commandTypeId.Value; } }
    public bool hasCommandTypeId { get { return HasComponent(GameComponentsLookup.CommandTypeId); } }

    public GameEntity AddCommandTypeId(Code.Gameplay.Features.Command.Data.CommandTypeId newValue) {
        var index = GameComponentsLookup.CommandTypeId;
        var component = (Code.Gameplay.Features.Command.CommandTypeIdComponent)CreateComponent(index, typeof(Code.Gameplay.Features.Command.CommandTypeIdComponent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceCommandTypeId(Code.Gameplay.Features.Command.Data.CommandTypeId newValue) {
        var index = GameComponentsLookup.CommandTypeId;
        var component = (Code.Gameplay.Features.Command.CommandTypeIdComponent)CreateComponent(index, typeof(Code.Gameplay.Features.Command.CommandTypeIdComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveCommandTypeId() {
        RemoveComponent(GameComponentsLookup.CommandTypeId);
        return this;
    }
}
