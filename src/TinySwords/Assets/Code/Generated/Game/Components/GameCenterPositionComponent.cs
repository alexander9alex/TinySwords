//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Code.Gameplay.Features.Interactions.Highlight;

public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherCenterPosition;

    public static Entitas.IMatcher<GameEntity> CenterPosition {
        get {
            if (_matcherCenterPosition == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.CenterPosition);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherCenterPosition = matcher;
            }

            return _matcherCenterPosition;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public CenterPosition centerPosition { get { return (CenterPosition)GetComponent(GameComponentsLookup.CenterPosition); } }
    public UnityEngine.Vector2 CenterPosition { get { return centerPosition.Value; } }
    public bool hasCenterPosition { get { return HasComponent(GameComponentsLookup.CenterPosition); } }

    public GameEntity AddCenterPosition(UnityEngine.Vector2 newValue) {
        var index = GameComponentsLookup.CenterPosition;
        var component = (CenterPosition)CreateComponent(index, typeof(CenterPosition));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceCenterPosition(UnityEngine.Vector2 newValue) {
        var index = GameComponentsLookup.CenterPosition;
        var component = (CenterPosition)CreateComponent(index, typeof(CenterPosition));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveCenterPosition() {
        RemoveComponent(GameComponentsLookup.CenterPosition);
        return this;
    }
}
