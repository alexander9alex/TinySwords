//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherAttackDirection;

    public static Entitas.IMatcher<GameEntity> AttackDirection {
        get {
            if (_matcherAttackDirection == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.AttackDirection);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherAttackDirection = matcher;
            }

            return _matcherAttackDirection;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Gameplay.Features.Battle.AttackDirection attackDirection { get { return (Code.Gameplay.Features.Battle.AttackDirection)GetComponent(GameComponentsLookup.AttackDirection); } }
    public UnityEngine.Vector2 AttackDirection { get { return attackDirection.Value; } }
    public bool hasAttackDirection { get { return HasComponent(GameComponentsLookup.AttackDirection); } }

    public GameEntity AddAttackDirection(UnityEngine.Vector2 newValue) {
        var index = GameComponentsLookup.AttackDirection;
        var component = (Code.Gameplay.Features.Battle.AttackDirection)CreateComponent(index, typeof(Code.Gameplay.Features.Battle.AttackDirection));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceAttackDirection(UnityEngine.Vector2 newValue) {
        var index = GameComponentsLookup.AttackDirection;
        var component = (Code.Gameplay.Features.Battle.AttackDirection)CreateComponent(index, typeof(Code.Gameplay.Features.Battle.AttackDirection));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveAttackDirection() {
        RemoveComponent(GameComponentsLookup.AttackDirection);
        return this;
    }
}
