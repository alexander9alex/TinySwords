//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherUpdateFieldOfVisionTimer;

    public static Entitas.IMatcher<GameEntity> UpdateFieldOfVisionTimer {
        get {
            if (_matcherUpdateFieldOfVisionTimer == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.UpdateFieldOfVisionTimer);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherUpdateFieldOfVisionTimer = matcher;
            }

            return _matcherUpdateFieldOfVisionTimer;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Gameplay.Features.CollectEntities.UpdateFieldOfVisionTimer updateFieldOfVisionTimer { get { return (Code.Gameplay.Features.CollectEntities.UpdateFieldOfVisionTimer)GetComponent(GameComponentsLookup.UpdateFieldOfVisionTimer); } }
    public float UpdateFieldOfVisionTimer { get { return updateFieldOfVisionTimer.Value; } }
    public bool hasUpdateFieldOfVisionTimer { get { return HasComponent(GameComponentsLookup.UpdateFieldOfVisionTimer); } }

    public GameEntity AddUpdateFieldOfVisionTimer(float newValue) {
        var index = GameComponentsLookup.UpdateFieldOfVisionTimer;
        var component = (Code.Gameplay.Features.CollectEntities.UpdateFieldOfVisionTimer)CreateComponent(index, typeof(Code.Gameplay.Features.CollectEntities.UpdateFieldOfVisionTimer));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceUpdateFieldOfVisionTimer(float newValue) {
        var index = GameComponentsLookup.UpdateFieldOfVisionTimer;
        var component = (Code.Gameplay.Features.CollectEntities.UpdateFieldOfVisionTimer)CreateComponent(index, typeof(Code.Gameplay.Features.CollectEntities.UpdateFieldOfVisionTimer));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveUpdateFieldOfVisionTimer() {
        RemoveComponent(GameComponentsLookup.UpdateFieldOfVisionTimer);
        return this;
    }
}
