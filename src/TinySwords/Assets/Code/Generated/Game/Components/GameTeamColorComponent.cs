//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherTeamColor;

    public static Entitas.IMatcher<GameEntity> TeamColor {
        get {
            if (_matcherTeamColor == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.TeamColor);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherTeamColor = matcher;
            }

            return _matcherTeamColor;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Gameplay.Features.Unit.HasTarget.TeamColorComponent teamColor { get { return (Code.Gameplay.Features.Unit.HasTarget.TeamColorComponent)GetComponent(GameComponentsLookup.TeamColor); } }
    public Code.Gameplay.Features.Units.Data.TeamColor TeamColor { get { return teamColor.Value; } }
    public bool hasTeamColor { get { return HasComponent(GameComponentsLookup.TeamColor); } }

    public GameEntity AddTeamColor(Code.Gameplay.Features.Units.Data.TeamColor newValue) {
        var index = GameComponentsLookup.TeamColor;
        var component = (Code.Gameplay.Features.Unit.HasTarget.TeamColorComponent)CreateComponent(index, typeof(Code.Gameplay.Features.Unit.HasTarget.TeamColorComponent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceTeamColor(Code.Gameplay.Features.Units.Data.TeamColor newValue) {
        var index = GameComponentsLookup.TeamColor;
        var component = (Code.Gameplay.Features.Unit.HasTarget.TeamColorComponent)CreateComponent(index, typeof(Code.Gameplay.Features.Unit.HasTarget.TeamColorComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveTeamColor() {
        RemoveComponent(GameComponentsLookup.TeamColor);
        return this;
    }
}
